name: Build
on:
  workflow_call:
  workflow_dispatch:
jobs:
  build-full:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Build
        run: cargo build --verbose
  build-worker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm install wrangler
      - uses: Swatinem/rust-cache@v2
      - run: npx wrangler deploy --dry-run
  build-docker-amd64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          tags: cbackas/hookbuffer:latest-amd64
          platforms: linux/amd64
          outputs: type=docker,dest=${{ runner.temp }}/hookbuffer-amd64.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - uses: actions/upload-artifact@v4
        with:
          name: hookbuffer-docker-amd64-tar
          path: ${{ runner.temp }}/hookbuffer-amd64.tar
  build-docker-arm64:
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          tags: cbackas/hookbuffer:latest-arm64
          platforms: linux/arm64
          outputs: type=docker,dest=${{ runner.temp }}/hookbuffer-arm64.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - uses: actions/upload-artifact@v4
        with:
          name: hookbuffer-docker-arm64-tar
          path: ${{ runner.temp }}/hookbuffer-arm64.tar
  test-download:
    runs-on: ubuntu-latest
    needs: [build-docker-amd64, build-docker-arm64]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: hookbuffer-docker-*-tar
          merge-multiple: true

      - run: docker load -i hookbuffer-amd64.tar
      - run: docker load -i hookbuffer-arm64.tar

      - name: Get Image IDs
        id: get_ids
        run: |
          AMD64_ID=$(docker image inspect --format '{{.ID}}' cbackas/hookbuffer:latest-amd64)
          ARM64_ID=$(docker image inspect --format '{{.ID}}' cbackas/hookbuffer:latest-arm64)
          echo "AMD64_ID=${AMD64_ID}" >> "$GITHUB_OUTPUT"
          echo "ARM64_ID=${ARM64_ID}" >> "$GITHUB_OUTPUT"

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and Push AMD64 Digest
        run: |
          docker tag ${{ steps.get_ids.outputs.AMD64_ID }} \
            ghcr.io/cbackas/hookbuffer@${{ steps.get_ids.outputs.AMD64_ID }}
          docker push ghcr.io/cbackas/hookbuffer@${{ steps.get_ids.outputs.AMD64_ID }}

      - name: Tag and Push ARM64 Digest
        run: |
          docker tag ${{ steps.get_ids.outputs.ARM64_ID }} \
            ghcr.io/cbackas/hookbuffer@${{ steps.get_ids.outputs.ARM64_ID }}
          docker push ghcr.io/cbackas/hookbuffer@${{ steps.get_ids.outputs.ARM64_ID }}

      - name: Create Manifest List
        run: |
          docker manifest create ghcr.io/cbackas/hookbuffer:latest \
            --amend ghcr.io/cbackas/hookbuffer@${{ steps.get_ids.outputs.AMD64_ID }} \
            --amend ghcr.io/cbackas/hookbuffer@${{ steps.get_ids.outputs.ARM64_ID }}

      - name: Push Combined Manifest
        run: docker manifest push ghcr.io/cbackas/hookbuffer:pr-testing

      - name: Cleanup Local Tags
        run: |
          docker image rm \
            ghcr.io/cbackas/hookbuffer@${{ steps.get_ids.outputs.AMD64_ID }} \
            ghcr.io/cbackas/hookbuffer@${{ steps.get_ids.outputs.ARM64_ID }}
